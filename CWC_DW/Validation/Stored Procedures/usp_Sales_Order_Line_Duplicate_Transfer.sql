
CREATE PROC [Validation].[usp_Sales_Order_Line_Duplicate_Transfer]
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SET NOCOUNT ON;

BEGIN TRY
	DECLARE @procedureUpdateKey_ AS INT = 0
		,@USER AS VARCHAR(20) = current_user
		,@date AS SMALLDATETIME = getdate()
		,@stored_procedure_name VARCHAR(50) = OBJECT_NAME(@@PROCID);

	EXEC Administration.usp_Procedure_Updates_Insert @procedureName = @stored_procedure_name
		,@procedureUpdateKey = @procedureUpdateKey_ OUTPUT;
		--Archive Error Records
		;

	WITH Duplicate_Orders
	AS (
		SELECT SalesOrderNumber = sl.SALESORDERNUMBER
			,LineNumber = sl.[LINECREATIONSEQUENCENUMBER]
		--,RecordCount = COUNT(*) 
		FROM [AX_PRODUCTION].[dbo].[ITSSalesOrderLineStaging] sl
		GROUP BY sl.SALESORDERNUMBER
			,sl.[LINECREATIONSEQUENCENUMBER]
		HAVING COUNT(*) > 1
		)
		,Duplicate_Seq
	AS (
		SELECT Seq = ROW_NUMBER() OVER (
				PARTITION BY sl.SalesOrderNumber ORDER BY CASE [SALESORDERLINESTATUS]
						WHEN 0
							THEN 4 --'None'
						WHEN 1
							THEN 3 --'Backorder'
						WHEN 2
							THEN 2 --'Delivered'
						WHEN 3
							THEN 1 --'Invoiced'
						WHEN 4
							THEN 5 --'Canceled'
						END
					,sl.[SALESLINEMODIFIEDDATETIME] DESC
				)
			,sl.*
		FROM Duplicate_Orders do
		INNER JOIN [AX_PRODUCTION].[dbo].[ITSSalesOrderLineStaging] sl ON do.SALESORDERNUMBER = sl.SALESORDERNUMBER
			AND do.LineNumber = sl.[LINECREATIONSEQUENCENUMBER]
		)
	INSERT INTO [AX_PRODUCTION].[dbo].[ITSSalesOrderLineStaging_Errors]
	SELECT Error_Transfer_Date = CAST(SYSUTCDATETIME() AS DATETIME2(5))
		,Error_Reason = 'Duplicate'
		,[DEFINITIONGROUP]
		,[EXECUTIONID]
		,[ISSELECTED]
		,[TRANSFERSTATUS]
		,[SALESORDERNUMBER]
		,[INVENTORYLOTID]
		,[SALESORDERLINESTATUS]
		,[ISLINESTOPPED]
		,[CUSTOMERSLINENUMBER]
		,[CUSTOMSDOCUMENTDATE]
		,[CUSTOMSDOCUMENTNUMBER]
		,[CUSTOMSDOCUMENTNAME]
		,[SALESORDERPROMISINGMETHOD]
		,[DELIVERYADDRESSNAME]
		,[DELIVERYMODECODE]
		,[DELIVERYTERMSID]
		,[EXTERNALITEMNUMBER]
		,[BOMID]
		,[ITEMNUMBER]
		,[ROUTEID]
		,[LINEAMOUNT]
		,[LINEDISCOUNTAMOUNT]
		,[LINEDISCOUNTPERCENTAGE]
		,[MULTILINEDISCOUNTAMOUNT]
		,[MULTILINEDISCOUNTPERCENTAGE]
		,[LINEDESCRIPTION]
		,[ALLOWEDOVERDELIVERYPERCENTAGE]
		,[PACKINGUNITSYMBOL]
		,[WILLAUTOMATICINVENTORYRESERVATIONCONSIDERBATCHATTRIBUTES]
		,[WILLREBATECALCULATIONEXCLUDELINE]
		,[SALESREBATEPRODUCTGROUPID]
		,[INTRASTATPORTID]
		,[SALESPRICEQUANTITY]
		,[EINVOICEPROPERTYNUMBER]
		,[CUSTOMERREQUISITIONNUMBER]
		,[CONFIRMEDRECEIPTDATE]
		,[REQUESTEDRECEIPTDATE]
		,[INVENTORYRESERVATIONMETHOD]
		,[COMMISSIONSALESREPRESENTATIVEGROUPID]
		,[FIXEDPRICECHARGES]
		,[SALESPRICE]
		,[ORDEREDSALESQUANTITY]
		,[SALESUNITSYMBOL]
		,[SERVICEORDERNUMBER]
		,[CONFIRMEDSHIPPINGDATE]
		,[REQUESTEDSHIPPINGDATE]
		,[INTRASTATSTATISTICSPROCEDURECODE]
		,[ISINTRASTATTRIANGULARDEAL]
		,[SALESTAXGROUPCODE]
		,[SALESTAXITEMGROUPCODE]
		,[INTRASTATTRANSACTIONCODE]
		,[INTRASTATTRANSPORTMODECODE]
		,[ALLOWEDUNDERDELIVERYPERCENTAGE]
		,[SALESPRODUCTCATEGORYNAME]
		,[DEFAULTLEDGERDIMENSIONDISPLAYVALUE]
		,[MAINACCOUNTIDDISPLAYVALUE]
		,[NGPCODE]
		,[PRODUCTCONFIGURATIONID]
		,[ITEMBATCHNUMBER]
		,[PRODUCTCOLORID]
		,[SHIPPINGWAREHOUSEID]
		,[SHIPPINGSITEID]
		,[PRODUCTSIZEID]
		,[ORDEREDINVENTORYSTATUSID]
		,[PRODUCTSTYLEID]
		,[ORDERLINEREFERENCE]
		,[ISDELIVERYADDRESSORDERSPECIFIC]
		,[FORMATTEDDELVERYADDRESS]
		,[DELIVERYBUILDINGCOMPLIMENT]
		,[DELIVERYADDRESSCITY]
		,[DELIVERYADDRESSCOUNTRYREGIONID]
		,[DELIVERYADDRESSCOUNTRYREGIONISOCODE]
		,[DELIVERYADDRESSCOUNTYID]
		,[DELIVERYADDRESSDESCRIPTION]
		,[DELIVERYADDRESSDISTRICTNAME]
		,[DELIVERYADDRESSDUNSNUMBER]
		,[ISDELIVERYADDRESSPRIVATE]
		,[DELIVERYADDRESSLATITUDE]
		,[DELIVERYADDRESSLOCATIONID]
		,[DELIVERYADDRESSLONGITUDE]
		,[DELIVERYADDRESSPOSTBOX]
		,[DELIVERYADDRESSSTATEID]
		,[DELIVERYADDRESSSTREET]
		,[DELIVERYADDRESSSTREETNUMBER]
		,[DELIVERYADDRESSZIPCODE]
		,[DELIVERYADDRESSTIMEZONE]
		,[INTRASTATCOMMODITYCODE]
		,[EINVOICEDIMENSIONACCOUNTCODE]
		,[WITHHOLDINGTAXGROUPCODE]
		,[ITEMWITHHOLDINGTAXCODEGROUPCODE]
		,[CREDITNOTEREASONCODE]
		,[INTRASTATSTATISTICVALUE]
		,[INTRASTATSPECIALMOVEMENTCODE]
		,[DELIVERYSALESTAXGROUPCODE]
		,[DELIVERYSALESTAXITEMGROUPCODE]
		,[DELIVERYCFOPCODE]
		,[CFOPCODE]
		,[SUFRAMADISCOUNTPERCENTAGE]
		,[SERVICEFISCALINFORMATIONCODE]
		,[FISCALDOCUMENTTYPEID]
		,[LINECREATIONSEQUENCENUMBER]
		,[INVENTTRANSID]
		,[RESERVEQTY]
		,[SHIPQTY]
		,[INVENTREFID]
		,[INVENTREFTRANSID]
		,[SALESTYPE]
		,[COSTPRICE]
		,[CONFIRMEDDLV]
		,[QTYORDERED]
		,[REMAINSALESPHYSICAL]
		,[SALESLINEMODIFIEDDATETIME]
		,[SALESLINECREATEDBY]
		,[SALESLINECREATEDDATETIME]
		,[RETURNDISPOSITIONCODEID]
		,[INVENTTRANSIDRETURN]
		,[PARTITION]
		,[DATAAREAID]
		,[SYNCSTARTDATETIME]
	FROM Duplicate_Seq
	WHERE seq > 1;
		--Remove duplicates from reporting table
		;

	WITH Duplicate_Orders
	AS (
		SELECT SalesOrderNumber = sl.SALESORDERNUMBER
			,LineNumber = sl.[LINECREATIONSEQUENCENUMBER]
			,SalesOrderLineConcat = CONCAT (
				sl.SALESORDERNUMBER
				,'-'
				,sl.[LINECREATIONSEQUENCENUMBER]
				)
		FROM [AX_PRODUCTION].[dbo].[ITSSalesOrderLineStaging] sl
		GROUP BY sl.SALESORDERNUMBER
			,sl.[LINECREATIONSEQUENCENUMBER]
		HAVING COUNT(*) > 1
		)
		,Duplicate_Seq
	AS (
		SELECT Seq = ROW_NUMBER() OVER (
				PARTITION BY sl.SalesOrderNumber ORDER BY CASE [SALESORDERLINESTATUS]
						WHEN 0
							THEN 4 --'None'
						WHEN 1
							THEN 3 --'Backorder'
						WHEN 2
							THEN 2 --'Delivered'
						WHEN 3
							THEN 1 --'Invoiced'
						WHEN 4
							THEN 5 --'Canceled'
						END
					,sl.[SALESLINEMODIFIEDDATETIME] DESC
				)
			,sl.*
		FROM [AX_PRODUCTION].[dbo].[ITSSalesOrderLineStaging] sl
		WHERE CONCAT (
				sl.SALESORDERNUMBER
				,'-'
				,sl.[LINECREATIONSEQUENCENUMBER]
				) IN (
				SELECT SalesOrderLineConcat
				FROM Duplicate_Orders
				)
		)
	DELETE Duplicate_Seq
	WHERE seq > 1;

	UPDATE Administration.Procedure_Updates
	SET [Status] = 'SUCCESS'
		,Affected_Rows = @@ROWCOUNT
		,End_Date = getdate()
	WHERE Procedure_Update_Key = @procedureUpdateKey_
END TRY

BEGIN CATCH
	IF @procedureUpdateKey_ <> 0
		UPDATE [Administration].Procedure_Updates
		SET [Status] = 'FAILED'
			,Error = ERROR_MESSAGE()
			,End_Date = getdate()
		WHERE Procedure_Update_Key = @procedureUpdateKey_

	DECLARE @InputParameters NVARCHAR(MAX)

	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION

	SELECT @InputParameters = '';

	EXEC Administration.usp_Error_Logger_Insert @InputParameters;
END CATCH  

